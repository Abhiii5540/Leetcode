GFG practise Link :- https://practice.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list5035/1

/*
Given a link list of size N, modify the list such that all the even numbers appear before all the odd numbers in the modified list. The order of appearance of numbers within each segregation should be same as that in the original list.

NOTE: Don't create a new linked list, instead rearrange the provided one.


Example 1:

Input: 
N = 7
Link List:
17 -> 15 -> 8 -> 9 -> 2 -> 4 -> 6 -> NULL

Output: 8 2 4 6 17 15 9

Explaination: 8,2,4,6 are the even numbers 
so they appear first and 17,15,9 are odd 
numbers that appear later.
*/

class Solution{
    Node divide(int N, Node head){
        // code here
        Node odd=null,o=null;
        Node even=null,e=null;
        
        while(head!=null){
            if(head.data%2==0){
                if(even==null){// if even list has no nodes , i.e. stating node , 
                //then add head node to both even and e node
                    even=head;
                    e=head;
                }
                else{ // if node exist add head node next to e and move e pointer
                    e.next=head;
                    e=e.next;
                }
            }
            else{
                if(odd==null){// if odd list has no nodes , i.e. stating node , 
                //then add head node to both odd and o node
                    odd=head;
                    o=head;
                }
                else{// if node exist add head node next to o and move o pointer
                    o.next=head;
                    o=o.next;
                }
            }
            head=head.next;
        } 
            if(e!=null){// if e node exists , ie. it has nodes then add odd node to next of e
                e.next=odd;
            }
            
            if(o!=null){// if o node exists , ie. it has nodes then add null to the last of o
                o.next=null;
            }
            
            if(even!=null){
                return even;
            }
            
            return odd;
    }
}
