/*
Question link :- https://practice.geeksforgeeks.org/problems/children-sum-parent/1

Given a Binary Tree. Check whether all of its nodes have the value equal to the sum of their child nodes.


Example 1:

Input:
     10
    /
  10 
Output: 1
Explanation: Here, every node is sum of
its left and right child.
Example 2:

Input:
       1
     /   \
    4     3
   /  \
  5    N
Output: 0
Explanation: Here, 1 is the root node
and 4, 3 are its child nodes. 4 + 3 =
7 which is not equal to the value of
root node. Hence, this tree does not
satisfy the given conditions.

*/

import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

public class RootToNodePath {

    static int isSumProperty(TreeNode root) {

        int child = 0;
        // add your code here
        if (root == null || (root.left == null && root.right == null))
            return 1;
        else {
            if (root.left != null)
                child += root.left.data;
            if (root.right != null)
                child += root.right.data;

            if (child == root.data &&
                    (isSumProperty(root.left) != 0) &&
                    (isSumProperty(root.right) != 0)) {
                return 1;
            } else
                return 0;
        }

    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right = new TreeNode(3);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);
        System.out.println(isSumProperty(root));
    }
}
